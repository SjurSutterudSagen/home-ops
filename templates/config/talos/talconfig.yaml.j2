# yaml-language-server: $schema=https://raw.githubusercontent.com/budimanjojo/talhelper/master/pkg/config/schemas/talconfig.json
---
clusterName: kubernetes

talosVersion: "${talosVersion}"
kubernetesVersion: "${kubernetesVersion}"

endpoint: https://#{ cluster_api_addr }#:6443
additionalApiServerCertSans: &sans
  - "127.0.0.1"
  - "#{ cluster_api_addr }#"
  #% for item in cluster_api_tls_sans %#
  - "#{ item }#"
  #% endfor %#
additionalMachineCertSans: *sans

clusterPodNets: ["#{ cluster_pod_cidr }#"]
clusterSvcNets: ["#{ cluster_svc_cidr }#"]

# Disable built-in CNI to use Cilium
cniConfig:
  name: none

nodes:
  #% for item in nodes %#
  - hostname: "#{ item.name }#"
    ipAddress: "#{ item.address }#"
    #% if item.disk.startswith('/') %#
    installDisk: "#{ item.disk }#"
    #% else %#
    installDiskSelector:
      serial: "#{ item.disk }#"
    #% endif %#
    machineSpec:
      secureboot: #{ (true if item.secureboot else false) | string | lower }#
    talosImageURL: factory.talos.dev/installer#{ "-secureboot" if item.secureboot | default(false, true) }#/#{ item.schematic_id }#
    controlPlane: #{ (item.controller) | string | lower }#
    networkInterfaces:
      #% set external_mac_addresses = [] %#
      #% for i in range(1, 10) %#
        #% set mac_attr = 'mac_addr_' ~ i %#
        #% if item.get(mac_attr) %#
          #% set _ = external_mac_addresses.append((i, item[mac_attr])) %#
        #% endif %#
      #% endfor %#
      #% if item.mac_addr and not external_mac_addresses %#
      # External/Management Network Interface - Single interface mode
      - deviceSelector:
          hardwareAddr: "#{ item.mac_addr | lower }#"
        #% if node_vlan_tag %#
        vlans:
          - vlanId: #{ node_vlan_tag }#
            addresses:
              - "#{ item.address }#/#{ node_cidr.split('/') | last }#"
            mtu: #{ item.mtu | default(1500, true) }#
            routes:
              - network: "0.0.0.0/0"
                gateway: "#{ node_default_gateway }#"
        #% else %#
        dhcp: false
        addresses:
          - "#{ item.address }#/#{ node_cidr.split('/') | last }#"
        routes:
          - network: "0.0.0.0/0"
            gateway: "#{ node_default_gateway }#"
        mtu: #{ item.mtu | default(1500, true) }#
        #% endif %#
      #% elif external_mac_addresses %#
      # Bond for external network - combines multiple external interfaces for redundancy
      - interface: bond-external
        bond:
          mode: active-backup  # Failover mode - only one interface active at a time
          miimon: 100          # Monitor link every 100ms
          deviceSelectors:
        #% for i, mac_addr in external_mac_addresses %#
            - hardwareAddr: "#{ mac_addr | lower }#"
        #% endfor %#
        #% if node_vlan_tag %#
        vlans:
          - vlanId: #{ node_vlan_tag }#
            dhcp: false
            addresses:
              - "#{ item.address }#/#{ node_cidr.split('/') | last }#"
            routes:
              - network: "0.0.0.0/0"
                gateway: "#{ node_default_gateway }#"
        #% else %#
        dhcp: false
        addresses:
          - "#{ item.address }#/#{ node_cidr.split('/') | last }#"
        routes:
          - network: "0.0.0.0/0"
            gateway: "#{ node_default_gateway }#"
        mtu: #{ item.mtu | default(1500, true) }#
        #% endif %#
      #% endif %#
      #% if dual_network_enabled %#
        #% set cluster_interfaces = [] %#
        #% for i in range(1, 10) %#
          #% set interface_attr = 'cluster_interface_' ~ i %#
          #% if item.get(interface_attr) %#
            #% set _ = cluster_interfaces.append(item[interface_attr]) %#
          #% endif %#
        #% endfor %#
        #% set cluster_mac_addresses = [] %#
        #% for i in range(1, 10) %#
          #% set mac_attr = 'cluster_mac_addr_' ~ i %#
          #% if item.get(mac_attr) %#
            #% set _ = cluster_mac_addresses.append((i, item[mac_attr])) %#
          #% endif %#
        #% endfor %#
        #% if item.cluster_interface and not cluster_interfaces %#
      # Cluster Network Interface (High-speed direct connections) - Single interface mode
      - deviceSelector:
          hardwareAddr: "#{ item.cluster_mac_addr | lower }#"
        dhcp: false
        addresses:
          - "#{ item.cluster_address }#/#{ cluster_cidr.split('/') | last }#"
        mtu: #{ item.cluster_mtu | default(1500, true) }#
        #% if item.controller %#
        vip:
          ip: "#{ cluster_api_addr }#"
        #% endif %#
        #% elif cluster_interfaces %#
      # Partial mesh topology with specific direct cable connections
      # Node-1 NIC1 ↔ Node-2 NIC1, Node-1 NIC2 ↔ Node-3 NIC1, Node-2 NIC2 ↔ Node-3 NIC2
        #% set node_id = item.name.split('-')[-1] | int %#
        #% if node_id == 1 %#
      # Node-1: Primary cluster network + direct connections to Node-2 and Node-3
      - interface: "#{ cluster_interfaces[0] }#"  # enp1s0f0 -> Node-2
        addresses:
          - "10.0.0.10/24"  # Primary cluster IP for Kubernetes
          - "172.16.1.1/30"  # P2P link to Node-2
        mtu: #{ item.cluster_mtu | default(1500, true) }#
        vip:
          ip: "#{ cluster_api_addr }#"
      - interface: "#{ cluster_interfaces[1] }#"  # enp1s0f1 -> Node-3
        addresses:
          - "172.16.2.1/30"  # P2P link to Node-3
        mtu: #{ item.cluster_mtu | default(1500, true) }#
        #% elif node_id == 2 %#
      # Node-2: Primary cluster network + direct connections to Node-1 and Node-3
      - interface: "#{ cluster_interfaces[0] }#"  # enp1s0f0 -> Node-1
        addresses:
          - "10.0.0.11/24"  # Primary cluster IP for Kubernetes
          - "172.16.1.2/30"  # P2P link to Node-1
        mtu: #{ item.cluster_mtu | default(1500, true) }#
        vip:
          ip: "#{ cluster_api_addr }#"
      - interface: "#{ cluster_interfaces[1] }#"  # enp1s0f1 -> Node-3
        addresses:
          - "172.16.3.1/30"  # P2P link to Node-3
        mtu: #{ item.cluster_mtu | default(1500, true) }#
        #% elif node_id == 3 %#
      # Node-3: Primary cluster network + direct connections to Node-1 and Node-2
      - interface: "#{ cluster_interfaces[0] }#"  # enp1s0f0 -> Node-1
        addresses:
          - "10.0.0.12/24"  # Primary cluster IP for Kubernetes
          - "172.16.2.2/30"  # P2P link to Node-1
        mtu: #{ item.cluster_mtu | default(1500, true) }#
        vip:
          ip: "#{ cluster_api_addr }#"
      - interface: "#{ cluster_interfaces[1] }#"  # enp1s0f1 -> Node-2
        addresses:
          - "172.16.3.2/30"  # P2P link to Node-2
        mtu: #{ item.cluster_mtu | default(1500, true) }#
        #% endif %#
        #% elif item.cluster_mac_addr and not cluster_mac_addresses %#
      # Cluster Network Interface (High-speed direct connections) - Single interface mode (legacy)
      - deviceSelector:
          hardwareAddr: "#{ item.cluster_mac_addr | lower }#"
        dhcp: false
        addresses:
          - "#{ item.cluster_address }#/#{ cluster_cidr.split('/') | last }#"
        mtu: #{ item.cluster_mtu | default(1500, true) }#
        #% if item.controller %#
        vip:
          ip: "#{ cluster_api_addr }#"
        #% endif %#
        #% elif cluster_mac_addresses %#
      # Bridge for cluster network - combines multiple direct connections (legacy fallback)
      - interface: br-cluster
        bridge:
          stp:
            enabled: false
          interfaces:
            #% for i, mac_addr in cluster_mac_addresses %#
            - "enp1s0f#{ i - 1 }#"
            #% endfor %#
        addresses:
          - "#{ item.cluster_address }#/#{ cluster_cidr.split('/') | last }#"
        mtu: #{ item.cluster_mtu | default(1500, true) }#
        #% if item.controller %#
        vip:
          ip: "#{ cluster_api_addr }#"
        #% endif %#
        #% endif %#
      #% elif item.controller %#
      # VIP on external interface if no cluster network
        #% if node_vlan_tag %#
            vip:
              ip: "#{ cluster_api_addr }#"
        #% else %#
        vip:
          ip: "#{ cluster_api_addr }#"
        #% endif %#
      #% endif %#
    #% if talos_patches('%s' % (item.name)) | length == 0 %#
    #% if item.encrypt_disk | default(false, true) %#
    patches:
      - # Encrypt system disk with TPM
        |-
        machine:
          systemDiskEncryption:
            state:
              provider: luks2
              keys:
                - slot: 0
                  tpm: {}
            ephemeral:
              provider: luks2
              keys:
                - slot: 0
                  tpm: {}
    #% endif %#
    #% else %#
    #% for file in talos_patches('%s' % (item.name)) %#
    #% if loop.index == 1 %#
    patches:
    #% if item.encrypt_disk | default(false, true) %#
      - |-
        machine:
          systemDiskEncryption:
            state:
              provider: luks2
              keys:
                - slot: 0
                  tpm: {}
            ephemeral:
              provider: luks2
              keys:
                - slot: 0
                  tpm: {}
    #% endif %#
    #% endif %#
      - "@./patches/#{ item.name }#/#{ file | basename }#"
    #% endfor %#
    #% endif %#
  #% endfor %#

#% for file in talos_patches('global') %#
#% if loop.index == 1 %#
# Global patches
patches:
#% endif %#
  - "@./patches/global/#{ file | basename }#"
#% endfor %#

#% for file in talos_patches('controller') %#
#% if loop.index == 1 %#
# Controller patches
controlPlane:
  patches:
#% endif %#
    - "@./patches/controller/#{ file | basename }#"
#% endfor %#

#% if (nodes | selectattr('controller', 'equalto', False) | list | length) and (talos_patches('worker') | length) %#
#% for file in talos_patches('worker') %#
#% if loop.index == 1 %#
# Worker patches
worker:
  patches:
#% endif %#
    - "@./patches/worker/#{ file | basename }#"
#% endfor %#
#% endif %#
